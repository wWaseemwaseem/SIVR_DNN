% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 14-Jul-2023 19:31:12
%
% This script assumes these variables are defined:
%
%   t1 - input data.
%   t - target data.
load('Alldata.mat')
inputs = t;
targets = [R;R1;R2;R3;R4];


% Create a Fitting Network

%hiddenLayerSize = 20;          % one-hidden-layer ANNs (2-20-1-MLP)
%hiddenLayerSize = [5 15];      % two-hidden-layer ANNs (2-5-15-1-MLP)
hiddenLayerSize = [50 5];       % two-hidden-layer ANNs (2-15-5-1-MLP)

TF={'tansig','purelin'};
net = newff(inputs,targets,hiddenLayerSize,TF);
net.inputs{1}.processFcns = {'removeconstantrows','mapminmax'};
net.outputs{2}.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivide
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,inputs,targets);

% Test the Network
y_ann1 = net(inputs);
error1 = gsubtract(targets,y_ann1);
performance = perform(net,targets,y_ann1);

% View the Network
view(net)
% Recalculate Training, Validation and Test Performance
trainInd=tr.trainInd;
trainInputs = inputs(:,trainInd);
trainTargets = targets(:,trainInd);
trainOutputs = y_ann1(:,trainInd);
trainErrors = trainTargets-trainOutputs;
trainPerformance = perform(net,trainTargets,trainOutputs);

valInd=tr.valInd;
valInputs = inputs(:,valInd);
valTargets = targets(:,valInd);
valOutputs = y_ann1(:,valInd);
valErrors = valTargets-valOutputs;
valPerformance = perform(net,valTargets,valOutputs);

testInd=tr.testInd;
testInputs = inputs(:,testInd);
testTargets = targets(:,testInd);
testOutputs = y_ann1(:,testInd);
testError = testTargets-testOutputs;
testPerformance = perform(net,testTargets,testOutputs);
% Plots
% Uncomment these lines to enable various plots.

%figure, plotfit(net,x,t)
PlotResults(targets(1,:),y_ann1(1,:),'All Data (Recovered)');
PlotResults(trainTargets(1,:),trainOutputs(1,:),'Train Data (Recovered)');
PlotResults(valTargets(1,:),valOutputs(1,:),'Validation Data (Recovered)');
PlotResults(testTargets(1,:),testOutputs(1,:),'Test Data (Recovered)');

%% Solutions  plots
figure('Name','Fig1a: Variation of fractional derivative','NumberTitle','off')
plot(t,R,'b-','linewidth',1.5);
hold on
plot(t,R1,'g-','linewidth',1.5);
plot(t,R2,'r-','linewidth',1.5);
plot(t,R3,'k-','linewidth',1.5);
plot(t,R4,'m-','linewidth',1.5);
plot(t,y_ann1(1,:),':','linewidth',2)
plot(t,y_ann1(2,:),':','linewidth',2)
plot(t,y_ann1(3,:),':','linewidth',2)
plot(t,y_ann1(4,:),':','linewidth',2)
plot(t,y_ann1(5,:),':','linewidth',2)
hold off
xlabel('t')
ylabel('R(t)')
grid on
set(gca, 'FontWeight','b','FontSize',12,'yscale','linear')
legend('Reference, Case1','Reference, Case2','Reference, Case3','Reference, Case4','Reference, Case5','ANN, Case1','ANN, Case2','ANN Case3','ANN, Case4','ANN, Case5') 
figure('Name','Fig2: Variation of fractional derivative','NumberTitle','off')
semilogy(t,error1(1,:),'b-','linewidth',1.5);
hold on
semilogy(t,error1(2,:),'g-','linewidth',1.5);
semilogy(t,error1(3,:),'r-','linewidth',1.5);
semilogy(t,error1(4,:),'k-','linewidth',1.5);
semilogy(t,error1(5,:),'m-','linewidth',1.5);
hold off
xlabel('t')
ylabel('AE R(t)')
grid on
set(gca, 'FontWeight','b','FontSize',12)
legend('Reference, Case1','Reference, Case2','Reference, Case3','Reference, Case4','Reference, Case5','ANN, Case1','ANN, Case2','ANN Case3','ANN, Case4','ANN, Case5') 
